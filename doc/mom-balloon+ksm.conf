[main]
# The wake up frequency of the main daemon (in seconds)
main-loop-interval: 5

# The data collection interval for host statistics (in seconds)
host-monitor-interval: 5

# The data collection interval for guest statistics (in seconds)
guest-monitor-interval: 5

# The wake up frequency of the guest manager (in seconds).  The guest manager
# sets up monitoring and control for newly-created guests and cleans up after
# deleted guests.
guest-manager-interval: 5

# The interface MOM using to discover active guests and collect guest memory
# statistics. There're two choices for it: libvirt or vdsm.
hypervisor-interface: libvirt

# The wake up frequency of the policy engine (in seconds).  During each
# interval the policy engine evaluates the policy and passes the results
# to each enabled controller plugin.
policy-engine-interval: 10

# A comma-separated list of Controller plugins to enable
controllers: Balloon, KSM

# Sets the maximum number of statistic samples to keep for the purpose of
# calculating moving averages.
sample-history-length: 10

# The URI to use when connecting to this host's libvirt interface.  If this is
# left blank then the system default URI is used.
libvirt-hypervisor-uri:

# Set this to an existing, writable directory to enable plotting.  For each
# invocation of the program a subdirectory momplot-NNN will be created where NNN
# is a sequence number.  Within that directory, tab-delimited data files will be
# created and updated with all data generated by the configured Collectors.
plot-dir:

# Activate the RPC server on the designated port (-1 to disable).  RPC is
# disabled by default until authentication is added to the protocol.
rpc-port: -1

# At startup, load a policy from the given file.  If empty, no policy is loaded
policy:

# At startup, load policies from the given directory.  Only filenames matching
# *.policy will be considered.  Each loaded policy will be named according to
# the file's basename.  Policies are concatenated in alphabetical order by name
# for evaluation.
policy-dir:

# The default behaviour of MOM is to monitor each VM in a separate thread.
# This approach offers isolation between VMs, and avoids that one unresponding
# VM affects the monitoring of the others. The drawback is the increased resource
# consumption, which can be high when monitoring hundreds of VMs.
# Some Hypervisor interfaces (vdsmxmlrpc, vdsm) already take care to ensure
# responsivenes and deal internally with unresponsive VMs. MOM can take
# advantage of those guarantees, and do the monitoring using a single thread.
# If set to false, disable the current behaviour and configure MOM to monitor
# all the VMs using only one thread.
guest-manager-multi-thread: true

[logging]
# Set the destination for program log messages.  This can be either 'stdio' or
# a filename.  When the log goes to a file, log rotation will be done
# automatically.
log: stdio

# Set the logging verbosity level.  The following levels are supported:
# 5 or debug:     Debugging messages
# 4 or info:      Detailed messages concerning normal program operation
# 3 or warn:      Warning messages (program operation may be impacted)
# 2 or error:     Errors that severely impact program operation
# 1 or critical:  Emergency conditions
# This option can be specified by number or name.
verbosity: info

#log: /var/log/mom.log
## The following two variables are used only when logging is directed to a file.
# Set the maximum size of a log file (in bytes) before it is rotated.
#max-bytes: 2097152
# Set the maximum number of rotated logs to retain.
#backup-count: 5

[host]
# A comma-separated list of Collector plugins to use for Host data collection.
collectors: HostMemory, HostKSM

[guest]
# A comma-separated list of Collector plugins to use for Guest data collection.
collectors: GuestQemuProc, GuestMemory, GuestBalloon

# Collector-specific configuration for GuestQemuAgent
[Collector: GuestQemuAgent]
# Set the base path where the host-side sockets for guest communication can be
# found.  The GuestQemuAgent Collector will try to open the socket:
#   <socket_path>/<socket_name_template>
#   after appropriate socket_name_template substitution as explained below.
socket_path: /var/lib/libvirt/qemu

# Set the socket name template. Default: %(name)s.agent
# socket name is determined by substituting 'name'
# key in the template with guest name.
# Assuming guest name 'instance-00000001' and default template,
# socketname will be instance-00000001.agent.
# The GuestQemuAgent Collector will try to open the socket:
#   <socket_path>/<socket_name_template>
#   after guest name substitution in the template.
socket_name_template: %(name)s.agent

[Collector: GuestNetworkDaemon]
# Helper program to convert guest names to IP addresses.  This is only used by
# the GuestNetworkDaemon Collector.  See doc/name-to-ip for an example.
#name-to-ip-helper: doc/name-to-ip
